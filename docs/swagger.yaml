basePath: /api/v1
definitions:
  dto.CategoryRequest:
    properties:
      name:
        maxLength: 30
        minLength: 3
        type: string
      shop_id:
        type: string
    required:
    - name
    - shop_id
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      name:
        maxLength: 30
        minLength: 3
        type: string
      password:
        minLength: 6
        type: string
      roles:
        items:
          type: string
        type: array
    required:
    - confirm_password
    - email
    - name
    - password
    type: object
  dto.UpdateUserRequest:
    properties:
      name:
        maxLength: 30
        minLength: 3
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: champuplove@gmail.com
    name: API Support
  description: A RESTful API server with user authentication and MongoDB integration
  termsOfService: https://mywebideal.work
  title: Example Go Project API
  version: "1.0"
paths:
  /admin/user/{id}:
    delete:
      consumes:
      - application/json
      description: Get the API's delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Delete endpoint
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Get the API's update user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Update endpoint
      tags:
      - user
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get paginated list of users with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: List users
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Post the API's login
      parameters:
      - description: User login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses: {}
      summary: Login endpoint
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Post the API's register
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses: {}
      summary: Register endpoint
      tags:
      - auth
  /category:
    post:
      consumes:
      - application/json
      description: Post the API's create category
      parameters:
      - description: Category details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CategoryRequest'
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Create Category endpoint
      tags:
      - category
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Get the API's delete category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Delete Category endpoint
      tags:
      - category
  /category/list:
    get:
      consumes:
      - application/json
      description: Get the API's get all categories
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Get All Categories endpoint
      tags:
      - category
  /file/shop/{shop_id}/download/{file_id}:
    get:
      consumes:
      - application/json
      description: Get the API's download file store
      parameters:
      - description: Shop ID
        in: path
        name: shop_id
        required: true
        type: string
      - description: File Store ID
        in: path
        name: file_id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses: {}
      security:
      - Bearer: []
      summary: Download File Store endpoint
      tags:
      - file-store
  /shop:
    post:
      consumes:
      - multipart/form-data
      description: Post the API's create shop
      parameters:
      - description: Shop name
        in: formData
        maxLength: 30
        minLength: 3
        name: name
        required: true
        type: string
      - description: Shop budget
        in: formData
        name: budget
        required: true
        type: number
      - collectionFormat: csv
        description: Multiple files to upload
        in: formData
        items:
          type: file
        name: files
        type: array
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Create Shop endpoint
      tags:
      - shop
  /shop/{id}:
    delete:
      consumes:
      - application/json
      description: Get the API's delete shop
      parameters:
      - description: Shop ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Delete Shop endpoint
      tags:
      - shop
    get:
      consumes:
      - application/json
      description: Get the API's get shop
      parameters:
      - description: Shop ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Get Shop endpoint
      tags:
      - shop
    put:
      consumes:
      - multipart/form-data
      description: Get the API's update shop
      parameters:
      - description: Shop ID
        in: path
        name: id
        required: true
        type: string
      - description: Shop name
        in: formData
        maxLength: 30
        minLength: 3
        name: name
        required: true
        type: string
      - description: Shop budget
        in: formData
        name: budget
        required: true
        type: number
      - collectionFormat: csv
        description: Multiple files to upload
        in: formData
        items:
          type: file
        name: files
        type: array
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Update Shop endpoint
      tags:
      - shop
  /shop/list:
    get:
      consumes:
      - application/json
      description: Get paginated list of shops with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: List shops
      tags:
      - shop
  /user/profile:
    get:
      consumes:
      - application/json
      description: Get the API's get profile
      produces:
      - application/json
      responses: {}
      security:
      - Bearer: []
      summary: Profile endpoint
      tags:
      - user
schemes:
- http
- https
securityDefinitions:
  Bearer:
    description: 'Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
